{% include('includes/license_blurb_hashes.jinja') %}"""Utility functions for dealing with paths within the project."""


import os
import pathlib
from typing import Optional


def _is_git_repo(path: pathlib.Path) -> bool:
    if not path.is_dir():
        return False

    for child in path.iterdir():
        if child.name == ".git":
            return True

    return False


def _is_copier_ml_project(path: pathlib.Path) -> bool:
    if not path.is_dir():
        return False

    has_readme = False
    has_copier_answers = False
    has_module = False

    for child in path.iterdir():
        if child.name.lower() == "readme.md":
            has_readme = True
        elif child.name.lower() == ".copier-answers.yml":
            has_copier_answers = True
        elif child.name == "{{ module_name }}":
            has_module = True

    return has_readme and has_copier_answers and has_module


def _optionally_create_and_return(path: pathlib.Path, create: bool) -> pathlib.Path:
    if create:
        os.makedirs(path, exist_ok=True)

    return path


def get_project_root_path(cwd: Optional[pathlib.Path] = None) -> pathlib.Path:
    """
    Get the root path of the project.

    Searches from `cwd` upwards until it finds the project root.
    """
    start: pathlib.Path

    if cwd is None:
        start = pathlib.Path(os.getcwd())
    else:
        start = cwd

    result = start

    while (
        not _is_git_repo(result)
        and not _is_copier_ml_project(result)
        and result != result.parent
    ):
        result = result.parent

    if not _is_git_repo(result):
        raise Exception(
            f"no Git repository found in cwd or parent directories (cwd: {start}, searched up to: {result})"
        )

    if not _is_copier_ml_project(result):
        raise Exception(
            f'Git repository found in cwd or parent directories does not contain expected children (required: README.md and .copier-answers.yml", cwd: {start}, searched up to: {result})'
        )

    return result


def get_dir_artifacts_data_raw(
    cwd: Optional[pathlib.Path] = None, create: bool = True
) -> pathlib.Path:
    """
    Get the path to the raw data artifacts directory.

    This is used as a download cache for unchanged raw data files.
    """
    return _optionally_create_and_return(
        get_project_root_path(cwd) / "artifacts" / "data" / "raw", create
    )


def get_dir_artifacts_data_intermediate(
    cwd: Optional[pathlib.Path] = None, create: bool = True
) -> pathlib.Path:
    """
    Get the path to the intermediate data artifacts directory.

    This is used as a cache for data files that are in some intermediate stage
    of transformation.
    """
    return _optionally_create_and_return(
        get_project_root_path(cwd) / "artifacts" / "data" / "intermediate",
        create,
    )


def get_dir_artifacts_data_cache(
    cwd: Optional[pathlib.Path] = None, create: bool = True
) -> pathlib.Path:
    """
    Get the path to the cache data artifacts directory.

    This is used as a cache for fully processed data files in their final form.
    """
    return _optionally_create_and_return(
        get_project_root_path(cwd) / "artifacts" / "data" / "cache", create
    )


def get_dir_checkpoints(
    cwd: Optional[pathlib.Path] = None, create: bool = True
) -> pathlib.Path:
    """
    Get the path to the checkpoint artifacts directory.

    This is used to store training checkpoints.
    """
    return _optionally_create_and_return(
        get_project_root_path(cwd) / "artifacts" / "checkpoints", create
    )


def get_dir_logs(
    cwd: Optional[pathlib.Path] = None, create: bool = True
) -> pathlib.Path:
    """
    Get the path to the log artifacts directory.

    This is used to store training logs.
    """
    return _optionally_create_and_return(
        get_project_root_path(cwd) / "artifacts" / "logs", create
    )


def get_dir_models(
    cwd: Optional[pathlib.Path] = None, create: bool = True
) -> pathlib.Path:
    """
    Get the path to the model artifacts directory.

    This is used to store saved models.
    """
    return _optionally_create_and_return(
        get_project_root_path(cwd) / "artifacts" / "models", create
    )


# fmt: off
__all__ = [
    "get_project_root_path",
    "get_dir_artifacts_data_raw",
    "get_dir_artifacts_data_intermediate",
    "get_dir_artifacts_data_cache",
    "get_dir_checkpoints",
    "get_dir_logs",
    "get_dir_models"
]
# fmt: on
